##Source Main
#Use this script to build libraries and start analysis
#so the directory will be at the top level of the repository
#Load Libraries
library(tidyverse)
#Build Libraries
source("R Scripts/Build Libraries.R")
##Source Main
#Use this script to build libraries and start analysis
#so the directory will be at the top level of the repository
#Load Libraries
library(tidyverse)
#Build old design and random Libraries
source("R Scripts/Build_old_design_and_random_libraries.R")
#Build new design library
source("R Scripts/Build_2019_design_library.R")
#this is a script to change from anino acid sequences to nucleotide sequence
print(library_2019)
#this is a script to change from anino acid sequences to nucleotide sequence
#making a codon chart
tibble(aa=c(W, Y, F)
codon_1= c('a', 'b', '')
codon_2=c('aa','bb','cc'))
#this is a script to change from anino acid sequences to nucleotide sequence
#making a codon chart
tibble(aa=c(W, Y, F)
codon_1= c('a', 'b', ''),
codon_2=c('aa','bb','cc'))
#this is a script to change from anino acid sequences to nucleotide sequence
#making a codon chart
tibble(aa=c(W, Y, F),
codon_1= c('a', 'b', ''),
codon_2=c('aa','bb','cc'))
#this is a script to change from anino acid sequences to nucleotide sequence
#making a codon chart
tibble(aa=c("W", 'Y', 'F'),
codon_1= c('a', 'b', ''),
codon_2=c('aa','bb','cc'))
#this is a script to change from anino acid sequences to nucleotide sequence
#making a codon chart
tibble(aa=c("W", 'Y', 'F'),
codon_1= c('a', 'b', 'c'),
codon_2=c('aa','bb','cc'))
Codon_table<-tibble(aa= c('F','S','Y','C','L','P','H','R','I','T','N','V','A','D','G','E','K','M','Q'),
codon_1=c('TTT','TCT','TAT','TGT','CTT','CCT','CAT','CGT','ATT','ACT','AAT','GTT','GCT','GAT','GGT','GAA','AAA','ATG','CAA'),
codon_2= c('TTC','TCC','TAC','TGC','CTC','CCC','CAC','CGC','ATC','ACC','AAC','GTC','GCC','GAC','GGC','GAG','AAG','ATG','CAG'))
Codon_table
hold_a<-strsplit(library_2019$W_first$sequence)
hold_a<-strsplit(library_2019$W_first$sequence,'')
hold_a
hold_a<-strsplit(library_2019$combinatorial$sequence,'')
hold_a
gsub(hold_a, Codon_table$codon_1)
gsub(hold_a,Codon_table_aa)
gsub(Codon_table$aa, Codon_table$codon_1, hold_a)
Codon_table$aa
NThold<-list()
for( i in 1:length(Codon_table$aa)){
NThold[[i]]<-gsub(Codon_table$aa, Codon_table$codon_1, hold_a)
}
NThold
#Use this script to build libraries and start analysis
#so the directory will be at the top level of the repository
#Load Libraries
library(tidyverse)
#Build old design and random Libraries
source("R Scripts/Build_old_design_and_random_libraries.R")
#Build new design library
source("R Scripts/Build_2019_design_library.R")
Codon_table<-tibble(aa= c('F','S','Y','C','L','P','H','R','I','T','N','V','A','D','G','E','K','M','Q','W'),
codon_1=c('TTT','TCT','TAT','TGT','CTT','CCT','CAT','CGT','ATT','ACT','AAT','GTT','GCT','GAT','GGT','GAA','AAA','ATG','CAA', 'TGG'),
codon_2= c('TTC','TCC','TAC','TGC','CTC','CCC','CAC','CGC','ATC','ACC','AAC','GTC','GCC','GAC','GGC','GAG','AAG','ATG','CAG', 'TGG'))
CombinatorialNT_tibble<-tibble(aa_seq= library_2019$combinatorial$sequence, nuc_seq= '')
CombinatorialNT_tibble
CombinatorialNT_tibble<-tibble(aa_seq= library_2019$combinatorial$sequence, nuc_seq= '')
for (i in 1:nrow(CombinatorialNT_tibble)) {
#make a vector for each aa sequence
seq <- strsplit(CombinatorialNT_tibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
new_seq <- ''
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq <- paste(new_seq, new_codon, sep = '')
}}
CombinatorialNT_tibble<-tibble(aa_seq= library_2019$combinatorial$sequence, nuc_seq= '')
for (i in 1:nrow(CombinatorialNT_tibble)) {
#make a vector for each aa sequence
seq <- strsplit(CombinatorialNT_tibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
new_seq <- ''
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq <- paste(new_seq, new_codon, sep = '')
}}
colnames(library_2019)
##doing the smae thing but for D first
#D_First
D_firstNT_tibble<-tibble(aa_seq= library_2019$D_first$sequence, nuc_seq = '')
D_firstNT_tibble<-tibble(aa_seq= library_2019$D_first$sequence, nuc_seq = '')
for (i in 1:nrow(D_firstNT_tibble)) {
#make a vector for each aa sequence
seq <- strsplit(D_firstNT_tibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
new_seq <- ''
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq <- paste(new_seq, new_codon, sep = '')
}}
#save nucleotide sequence
D_firstNT_tibble$nuc_seq[i] <- new_seq
D_firstNT_tibble
##doing the smae thing but for D first
#D_First
D_firstNT_tibble<-tibble(aa_seq= library_2019$D_first$sequence, nuc_seq = '')
new_seq<-list()
for (i in 1:nrow(D_firstNT_tibble)) {
#make a vector for each aa sequence
seq <- strsplit(D_firstNT_tibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq[[i]] <- paste(new_seq, new_codon, sep = '')
}}
for (i in 1:nrow(D_firstNT_tibble)) {
#make a vector for each aa sequence
seq <- strsplit(D_firstNT_tibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq[[i]] <- paste(new_seq, new_codon, sep = '')
}}
Codon_table<-tibble(aa= c('F','S','Y','C','L','P','H','R','I','T','N','V','A','D','G','E','K','M','Q','W'),
codon_1=c('TTT','TCT','TAT','TGT','CTT','CCT','CAT','CGT','ATT','ACT','AAT','GTT','GCT','GAT','GGT','GAA','AAA','ATG','CAA', 'TGG'),
codon_2= c('TTC','TCC','TAC','TGC','CTC','CCC','CAC','CGC','ATC','ACC','AAC','GTC','GCC','GAC','GGC','GAG','AAG','ATG','CAG', 'TGG'))
CombinatorialNT_tibble<-tibble(aa_seq= library_2019$combinatorial$sequence, nuc_seq= '')
for (i in 1:nrow(CombinatorialNT_tibble)) {
#make a vector for each aa sequence
seq <- strsplit(CombinatorialNT_tibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
new_seq <- ''
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq <- paste(new_seq, new_codon, sep = '')
}
#save nucleotide sequence
CombinatorialNT_tibble$nuc_seq[i] <- new_seq
}
#Load Libraries
library(tidyverse)
#Build old design and random Libraries
source("R Scripts/Build_old_design_and_random_libraries.R")
#Build new design library
source("R Scripts/Build_2019_design_library.R")
Codon_table<-tibble(aa= c('F','S','Y','C','L','P','H','R','I','T','N','V','A','D','G','E','K','M','Q', 'W'),
codon_1=c('TTT','TCT','TAT','TGT','CTT','CCT','CAT','CGT','ATT','ACT','AAT','GTT','GCT','GAT','GGT','GAA','AAA','ATG','CAA', 'TGG'),
codon_2= c('TTC','TCC','TAC','TGC','CTC','CCC','CAC','CGC','ATC','ACC','AAC','GTC','GCC','GAC','GGC','GAG','AAG','ATG','CAG', 'TGG'))
CodontoNuc<-function(df){
holdthetibble<-tibble(aa_seq= df, nuc_seq = '')
for (i in 1:nrow(holdthetibble)) {
#make a vector for each aa sequence
seq <- strsplit(holdthetibble$aa_seq[i], '')[[1]]
#just initialize a new nucleotide sequence for each aa sequence
new_seq <- ''
for(j in 1:length(seq)){
#match aa letter with codon, and return as a character vector
new_codon <- Codon_table %>%
filter(aa == seq[j]) %>%
select(codon_1) %>%
as.character()
#pastes all the codons as one nucleotide sequence
new_seq <- paste(new_seq, new_codon, sep = '')
}
#save nucleotide sequence
holdthetibble$nuc_seq[i] <- new_seq
}
return(holdthetibble)
}
library_2019_sequences<-list()
library_2019_sequences$W_first<-CodontoNuc(library_2019$W_first$sequence)
library_2019_sequences$combinatorial<- CodontoNuc(library_2019$combinatorial$sequence)
library_2019_sequences<-list()
library_2019_sequences$W_first<-CodontoNuc(library_2019$W_first$sequence)
library_2019_sequences$combinatorial<- CodontoNuc(library_2019$combinatorial$sequence)
#Load final AA library
library_sets_list <- readRDS("Final_Robject_AA_library_v3.rds")
#Load custom functions
source('R scripts/Custom_functions.R')
#Load Libraries
library(tidyverse)
#Load final AA library
library_sets_list <- readRDS("Final_Robject_AA_library_v3.rds")
#Load custom functions
source('R scripts/Custom_functions.R')
library_sets_list
#this script is the begining of creating an analysis for the new library
lengthhold<-library_sets_list$combinatorial$sequence
lengthhold
lengthhold$length<-0
#this script is the begining of creating an analysis for the new library
lengthhold<-data.frame()
lengthhold$sequence<-library_sets_list$combinatorial$sequence
lengthhold$sequence<-0
#this script is the begining of creating an analysis for the new library
lengthhold<-data.frame()
lengthhold$sequence<-0
library(tidyverse)
#Build old design and random Libraries
source("R Scripts/Build_old_design_and_random_libraries.R")
#Two designed sequences in random library. Remove them here
ro <- grep('WDWDWD', random_library$sequence)
WD_seqs <- random_library[ro,]
random_library <- random_library[-ro,]
#Build new design library
#source("R Scripts/Build_2019_design_library.R")
#Load final AA library
library_sets_list <- readRDS("Final_Robject_AA_library_v3.rds")
#Load custom functions
source('R scripts/Custom_functions.R')
